#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const program = require('commander')
const inquirer = require('inquirer')
const ora = require('ora')
const download = require('download-git-repo')

program
  .usage('init <template> [<project-name>]')
  .option('-c, --clone', '使用 git clone')

program.on('--help', () => {
  console.log()
  console.log('  内置的模板有:')
  console.log()
  console.log('    begin-vue')
  console.log()
})

program.parse(process.argv)
if (program.args.length < 1) {
  program.help()
  process.exit()
}

let repository
const templte = program.args[0]
const hasSlash = templte.indexOf('/') > -1
const rawName = program.args[1] || '.'
const inPlace = rawName === '.'
const destination = path.resolve(rawName)
const clone = program.clone || false
const repoMap = {
  'begin-vue': 'ccbabi/begin-vue'
}

if (!hasSlash) {
  repository = repoMap[templte]
  if (!repository) {
    console.err('模板文件不存在！')
    process.exit()
  }
} else {
  repository = templte
}

if (fs.existsSync(destination)) {
  const message = inPlace ? '当前目录生成一个项目？' : `${rawName}目录已存在，是否继续？`

  inquirer.prompt([{
    type: 'confirm',
    name: 'answers',
    message
  }]).then(({ answers }) => {
    if (answers) down()
  }).catch(err => {
    throw err
  })
} else {
  down()
}

function down () {
  const spinner = ora({
    text: '请稍候片刻..'
  })
  spinner.start()
  download(repository, rawName, { clone }, err => {
    spinner.stop()
    if (err) throw err
    console.log('初始化完成！')
  })
}
